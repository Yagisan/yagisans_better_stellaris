namespace = ybs_automigrate
event = {
	id = ybs_automigrate.0
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		# unemployed_migration_counter is set/reset in ybs_automigrate.1
		every_country = {
			limit = {
				is_ai = no
			}
			# Unemployed Organics
			country_event = {
				id = ybs_automigrate.1
				days = 7
			}
			if = {
				limit = {
					is_variable_set = unemployed_migration_counter
				}
				log = "Variable Check: Post Organics unemployed_migration_counter exists, value: [This.unemployed_migration_counter]"
			}
			if = {
				limit = {
					NOT = {
						is_variable_set = unemployed_migration_counter
					}
				}
				log = "Variable Check: Post Organics unemployed_migration_counter doesnt exist"
			}
			# Toilers / Servants
			country_event = {
				id = ybs_automigrate.2
				days = 8
			}
			if = {
				limit = {
					is_variable_set = unemployed_migration_counter
				}
				log = "Variable Check: Post Toilers/Servants unemployed_migration_counter exists, value: [This.unemployed_migration_counter]"
			}
			if = {
				limit = {
					NOT = {
						is_variable_set = unemployed_migration_counter
					}
				}
				log = "Variable Check: Post Toilers/Servants unemployed_migration_counter doesnt exist"
			}
			# Unemployed Robots
			country_event = {
				id = ybs_automigrate.3
				days = 9
			}
			if = {
				limit = {
					is_variable_set = unemployed_migration_counter
				}
				log = "Variable Check: Post Robots unemployed_migration_counter exists, value: [This.unemployed_migration_counter]"
			}
			if = {
				limit = {
					NOT = {
						is_variable_set = unemployed_migration_counter
					}
				}
				log = "Variable Check: Post Robots unemployed_migration_counter doesnt exist"
			}
		}
	}
}

country_event = {
	# Migrate unemployed organics to planets with jobs.
	id = ybs_automigrate.1
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		set_variable = {
			# Max out at 10 unemployed migrations per month.
			# Without a counter, and with enough money, it will
			# overshoot and move more pops in than jobs available.
			which = unemployed_migration_counter
			value = 0
		}
		set_variable = {
			# Free organics are highest priority with unemployed migration each month.
			which = organic_migration_counter
			value = 0
		}
		if = {
			limit = {
				is_variable_set = organic_migration_counter
			}
			log = "Variable Check: organic_migration_counter exists, value: [This.organic_migration_counter]"
		}
		if = {
			limit = {
				NOT = {
					is_variable_set = organic_migration_counter
				}
			}
			log = "Variable Check: organic_migration_counter doesnt exist"
		}
		log = "Yagisan - Checking Organic Unemployment for [ROOT.GetName]"
		every_owned_planet = {
			limit = {
				# at most 10 pops per month
				check_variable = {
					which = organic_migration_counter
					value < 10
				}
				count_owned_pop = {
					limit = {
						is_unemployed = yes
						is_being_purged = no
						# Must not be a robot
						is_robot_pop = no
					}
					count > 0
				}
				# Don't try to migrate off planets under attack
				has_orbital_bombardment = no
			}
			every_owned_pop = {
				limit = {
					is_unemployed = yes
					is_being_purged = no
					# Ignore assimilating pops
					NOT = {
						has_citizenship_type = {
							type = citizenship_assimilation
						}
					}
					# minimum of 1K energy to move pops
					owner = {
						has_country_resource = {
							type = energy
							amount > 1000
						}
					}
					# Must be allowed to migrate
					has_migration_control = {
						type = no
					}
					# Must not be a robot
					is_robot_pop = no
					# Must not be the last pop
					planet = {
						count_owned_pop = {
							count > 1
						}
					}
				}
				log = "Yagisan - Found Unemployed [This.GetName]"
				set_variable = {
					# Copy organic_migration_counter into this pop scope so we don't overshoot.
					which = inprogress_migration_counter
					value = PREVPREV.organic_migration_counter
				}
				if = {
					limit = {
						# minimum of 1K energy to move pops
						owner = {
							has_country_resource = {
								type = energy
								amount > 1000
							}
						}
						# at most 10 pops per month
						check_variable = {
							which = inprogress_migration_counter
							value < 10
						}
					}
					# PREV is the pop
					# PREVPREV is planet it is from
					PREVPREV = {
						ybs_automigrate_unemployed = yes
						if = {
							limit = {
								check_variable = {
									which = ybs_planet_found
									value = 1
								}
							}
							change_variable = {
								which = organic_migration_counter
								value = 1
							}
						}
					}
				}
			}
		}
		if = {
			limit = {
				is_variable_set = organic_migration_counter
			}
			log = "Variable Check: Loop end - organic_migration_counter exists, value: [This.organic_migration_counter]"
		}
		if = {
			limit = {
				NOT = {
					is_variable_set = organic_migration_counter
				}
			}
			log = "Variable Check: Loop end - organic_migration_counter doesnt exist"
		}
		set_variable = {
			# Copy organic_migration_counter into the previous scope so we can allocate the leftovers to other classes.
			which = unemployed_migration_counter
			value = organic_migration_counter
		}
	}
}

country_event = {
	# Migrate toilers on thrall to planets with jobs.
	id = ybs_automigrate.2
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		log = "Yagisan - Checking Toiler/Servant Unemployment for [ROOT.GetName]"
		every_owned_planet = {
			limit = {
				count_owned_pop = {
					limit = {
						any_owned_pop = {
							#Invalid Scope type for trigger any_owned_pop in events/ybs_automigrate_events.txt line : 152. Got pop
							OR = {
								has_job = slave_toiler
								has_job = servant
							}
						}
					}
					count > 0
				}
				# Don't try to migrate off planets under attack
				has_orbital_bombardment = no
			}
			every_owned_pop = {
				limit = {
					OR = {
						has_job = slave_toiler
						has_job = servant
					}
					# Ignore assimilating pops
					NOT = {
						has_citizenship_type = {
							type = citizenship_assimilation
						}
					}
					# minimum of 1K energy to move pops
					owner = {
						has_country_resource = {
							type = energy
							amount > 1000
						}
					}
					# Must be allowed to migrate
					has_migration_control = {
						type = no
					}
					# Must not be the last pop
					planet = {
						count_owned_pop = {
							count > 1
						}
					}
				}
				log = "Yagisan - Found Unemployed [This.GetName]"
				if = {
					limit = {
						# minimum of 1K energy to move pops
						owner = {
							has_country_resource = {
								type = energy
								amount > 1000
							}
						}
						# at most 10 pops per month
						check_variable = {
							which = organic_migration_counter
							value < 10
						}
					}
					# PREV is the pop
					# PREVPREV is planet it is from
					PREVPREV = {
						ybs_automigrate_unemployed = yes
						if = {
							limit = {
								check_variable = {
									which = ybs_planet_found
									value = 1
								}
							}
							change_variable = {
								which = organic_migration_counter
								value = 1
							}
						}
					}
				}
			}
		}
	}
}

country_event = {
	# Migrate unemployed robots to planets with jobs.
	id = ybs_automigrate.3
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		set_variable = {
			# Robots are lowest priority with unemployed migration each month.
			which = robotic_migration_counter
			value = unemployed_migration_counter
		}
		if = {
			limit = {
				is_variable_set = robotic_migration_counter
			}
			log = "Variable Check: robotic_migration_counter exists, value: [This.robotic_migration_counter]"
		}
		if = {
			limit = {
				NOT = {
					is_variable_set = robotic_migration_counter
				}
			}
			log = "Variable Check: robotic_migration_counter doesnt exist"
		}
		log = "Yagisan - Checking Robotic Unemployment for [ROOT.GetName]"
		every_owned_planet = {
			limit = {
				# at most 10 pops per month
				check_variable = {
					which = robotic_migration_counter
					value < 10
				}
				count_owned_pop = {
					limit = {
						is_unemployed = yes
						is_being_purged = no
						# Must be a robot
						is_robot_pop = yes
					}
					count > 0
				}
				# Don't try to migrate off planets under attack
				has_orbital_bombardment = no
			}
			every_owned_pop = {
				limit = {
					is_unemployed = yes
					is_being_purged = no
					# Ignore assimilating pops
					NOT = {
						has_citizenship_type = {
							type = citizenship_assimilation
						}
					}
					# minimum of 1K energy to move pops
					owner = {
						has_country_resource = {
							type = energy
							amount > 1000
						}
					}
					# Must be allowed to migrate
					OR = {
						has_migration_control = {
							type = no
						}
						# Or be a Robot
						is_robot_pop = yes
					}
					# Must not be the last pop
					planet = {
						count_owned_pop = {
							count > 1
						}
					}
				}
				log = "Yagisan - Found Unemployed [This.GetName]"
				set_variable = {
					# Copy robotic_migration_counter into this pop scope so we don't overshoot.
					which = inprogress_migration_counter
					value = PREVPREV.robotic_migration_counter
				}
				if = {
					limit = {
						# minimum of 1K energy to move pops
						owner = {
							has_country_resource = {
								type = energy
								amount > 1000
							}
						}
						# at most 10 pops per month
						check_variable = {
							which = inprogress_migration_counter
							value < 10
						}
					}
					# PREV is the pop
					# PREVPREV is planet it is from
					PREVPREV = {
						ybs_automigrate_unemployed = yes
						if = {
							limit = {
								check_variable = {
									which = ybs_planet_found
									value = 1
								}
							}
							change_variable = {
								which = robotic_migration_counter
								value = 1
							}
						}
					}
				}
			}
		}
		if = {
			limit = {
				is_variable_set = robotic_migration_counter
			}
			log = "Variable Check: Loop end - robotic_migration_counter exists, value: [This.robotic_migration_counter]"
		}
		if = {
			limit = {
				NOT = {
					is_variable_set = robotic_migration_counter
				}
			}
			log = "Variable Check: Loop end - robotic_migration_counter doesnt exist"
		}
		set_variable = {
			# Copy robotic_migration_counter into the previous scope so we can allocate the leftovers to other classes.
			which = unemployed_migration_counter
			value = robotic_migration_counter
		}
	}
}
