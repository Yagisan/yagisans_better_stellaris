#root = starbase
#from = player
# Weights in the ai_design part are multiplied with the base weight of 00_starbase_buildings.txt and 00_starbase_modules.txt
# Then, a random number between that value and and extra 50% of that it is ADDED to it
# F.e. 100 base weight multiplies with 2.00 = 200. Then we take a random number between 0 and 100 (50% of 200) and ADD it to 200. 235 then, for example
# This is done for ALL starbase modules and buildings in the list every time an evaluation is made
# And the building or module with the highest value will be chosen to being built
# The implication of that is that you can not balance the weights TOO FAR from each other - otherwise some modules will never be chosen, unless they are the only thing on the evaluation
# Due to the progression of the game and the unlocking of tech, though, it is often the case that there will only be 1 item on the list at any given time anyway
# How the AI/game selects which type to use:
# First of all, it will try to find one which fulfils both the potential trigger and has a positive weight_modifier
# If this succeeds, the starbase already has a type.
# If it fails, it will go through each starbase type that fulfils the potential trigger. Then it will check the ratio it has built (total of this type / total upgraded starbases) compared to the desired ratio. If it is set to desire a minimum value and owns less than that, it multiplies its ratio desire by * 100. Then it build according to that type's template.
# Shipyard
sshipyard = {
	potential = {
		has_starbase_size > starbase_outpost
	}
	weight_modifier = {
		base = 0
		complex_trigger_modifier = {
			#+100 for each shipyard
			trigger = count_starbase_modules
			parameters = {
				type = shipyard
			}
			mode = add
			mult = 100
		}
		modifier = {
			add = 1000
			exists = owner
			owner = {
				is_ai = yes
				NOR = {
					any_owned_megastructure = {
						OR = {
							is_megastructure_type = mega_shipyard_1
							is_megastructure_type = mega_shipyard_2
							is_megastructure_type = mega_shipyard_3
							is_megastructure_type = mega_shipyard_restored
						}
					}
					any_owned_starbase = {
						OR = {
							has_starbase_module = shipyard
							has_starbase_module = orbital_ring_shipyard
						}
					}
				}
			}
		}
	}
	ai_design = {
		min = {
			base = 1
		}
		ratio = {
			base = 0.2
			modifier = {
				add = 0.1
				exists = owner
				owner = {
					has_ethic = ethic_militarist
				}
			}
			modifier = {
				add = 0.05
				exists = owner
				owner = {
					has_ethic = ethic_fanatic_militarist
				}
			}
		}
		# token followed by priority
		buildings = {
			fleet_academy = {
				base = 3
			}
			crew_quarters = {
				base = 3
			}
			titan_yards = {
				base = 3
			}
			colossus_yards = {
				base = 3
			}
			dragon_hatchery = {
				base = 3
			}
			deep_space_black_site = {
				base = 2
			}
			transit_hub = {
				base = 2
			}
			curator_think_tank = {
				base = 2
			}
			art_college = {
				base = 2
			}
			trader_proxy_office = {
				base = 2
			}
			salvager_workshop = {
				base = 2
			}
			black_hole_observatory = {
				base = 2
			}
			nebula_refinery = {
				base = 2
			}
			ice_mining_station = {
				base = 2
			}
			shroud_beacon = {
				base = 1.5
			}
			resource_silo = {
				base = 1
			}
			hydroponics_bay = {
				base = 1
			}
		}
		modules = {
			shipyard = {
				base = 1
			}
		}
	}
}

# Anchorage
sanchorage = {
	potential = {
		has_starbase_size > starbase_outpost
	}
	weight_modifier = {
		base = 0
		complex_trigger_modifier = {
			#+100 for each anchorage
			trigger = count_starbase_modules
			parameters = {
				type = anchorage
			}
			mode = add
			mult = 100
		}
	}
	ai_design = {
		min = {
			base = 0
		}
		ratio = {
			base = 0.65
			modifier = {
				add = 0.05
				exists = owner
				owner = {
					has_ethic = ethic_militarist
				}
			}
			modifier = {
				add = 0.02
				exists = owner
				owner = {
					has_ethic = ethic_fanatic_militarist
				}
			}
		}
		# token followed by priority
		buildings = {
			naval_logistics_office = {
				base = 3
			}
			command_center = {
				base = 3
			}
			deep_space_black_site = {
				base = 3
			}
			transit_hub = {
				base = 3
			}
			curator_think_tank = {
				base = 2
			}
			art_college = {
				base = 2
			}
			trader_proxy_office = {
				base = 2
			}
			salvager_workshop = {
				base = 2
			}
			black_hole_observatory = {
				base = 2
			}
			nebula_refinery = {
				base = 2
			}
			ice_mining_station = {
				base = 2
			}
			offspring_outlook = {
				base = 2
			}
			resource_silo = {
				base = 2
			}
			hydroponics_bay = {
				base = 2
			}
			dragon_hatchery = {
				base = 1
			}
			# Hyperlane Registrar
			warp_fluctuator = {
				base = 1
			}
			communications_jammer = {
				base = 1
			}
			defense_grid = {
				base = 1
			}
			shroud_beacon = {
				base = 1
			}
		}
		modules = {
			anchorage = {
				base = 1
			}
			solar_panel_network = {
				base = 1
			}
		}
	}
}

# Trading Hub
strading_hub = {
	potential = {
		has_starbase_size > starbase_outpost
		exists = owner
		owner = {
			is_gestalt = no
		}
	}
	weight_modifier = {
		base = 0
		complex_trigger_modifier = {
			#+100 for each trading_hub
			trigger = count_starbase_modules
			parameters = {
				type = trading_hub
			}
			mode = add
			mult = 100
		}
		modifier = {
			add = 100
			has_starbase_building = offworld_trading_company
		}
		# try to be on the capital system.
		modifier = {
			add = 300
			owner = {
				is_ai = yes
			}
			solar_system = {
				is_capital_system = yes
				NOT = {
					any_neighbor_system = {
						exists = starbase
						starbase = {
							owner = {
								is_same_value = root.owner
							}
							has_starbase_module = trading_hub
						}
					}
				}
			}
		}
		modifier = {
			add = 150
			owner = {
				is_ai = yes
			}
			solar_system = {
				any_neighbor_system = {
					# good to place near capital
					is_capital_system = yes
					exists = starbase
					NOR = {
						# Captial is a trade hub - so we don't want to be one.
						starbase = {
							count_starbase_modules = {
								type = trading_hub
								count > 1
							}
						}
						# Have to check for 2 because it always starts with 1.
						# Neighbouring Captial is a trade hub - so we don't want to be one.
						any_neighbor_system = {
							exists = starbase
							starbase = {
								NOT = {
									is_same_value = root
								}
								owner = {
									is_same_value = root.owner
								}
								has_starbase_module = trading_hub
							}
						}
					}
				}
			}
		}
		# want to be near center of empire, not borders
		# has_trade_route = yes
		# num_trade_routes - Counts the number trade routes in the empire.
		modifier = {
			# Useless if cut off or if every owned system has a starbase
			factor = 0
			owner = {
				is_ai = yes
				is_same_value = root.owner
			}
			solar_system = {
				OR = {
					# No trade routes?
					has_trade_route = no
					# We have a starbase in very system? (really?)
					owner = {
						num_starbases >= trigger:controlled_systems
					}
					# We're isolated. An exclave?
					NOT = {
						any_neighbor_system = {
							exists = owner
							owner = {
								is_same_value = root.owner
							}
						}
					}
				}
			}
		}
		# 0 if AI and trade collection not needed
		modifier = {
			factor = 0
			owner = {
				is_ai = yes
			}
			NOT = {
				has_starbase_module = trading_hub
			}
			NOT = {
				owner = {
					any_system_within_border = {
						has_uncollected_system_trade_value > 0
					}
				}
			}
		}
	}
	ai_design = {
		min = {
			base = 0
		}
		ratio = {
			base = 0.15
			modifier = {
				add = 0.05
				exists = owner
				owner = {
					has_ethic = ethic_materialist
				}
			}
			modifier = {
				add = 0.1
				exists = owner
				owner = {
					has_ethic = ethic_fanatic_materialist
				}
			}
		}
		# token followed by priority
		buildings = {
			offworld_trading_company = {
				base = 3
			}
			# Hyperlane Registrar
			warp_fluctuator = {
				base = 3
			}
			deep_space_black_site = {
				base = 3
			}
			transit_hub = {
				base = 3
			}
			curator_think_tank = {
				base = 2
			}
			art_college = {
				base = 2
			}
			trader_proxy_office = {
				base = 2
			}
			salvager_workshop = {
				base = 2
			}
			black_hole_observatory = {
				base = 2
			}
			nebula_refinery = {
				base = 2
			}
			ice_mining_station = {
				base = 2
			}
			offspring_outlook = {
				base = 2
			}
			dragon_hatchery = {
				base = 2
			}
			resource_silo = {
				base = 1
			}
			hydroponics_bay = {
				base = 1
			}
			communications_jammer = {
				base = 1
			}
			defense_grid = {
				base = 1
			}
			shroud_beacon = {
				base = 1
			}
			command_center = {
				base = 1
			}
		}
		modules = {
			trading_hub = {
				base = 1
			}
		}
	}
}

# Fortress System
sfortress = {
	potential = {
		has_starbase_size > starbase_outpost
		exists = owner
		OR = {
			owner = {
				is_ai = no
			}
			AND = {
				solar_system = {
					is_bottleneck_system = yes
				}
				closest_system = {
					min_steps = 0
					max_steps = 2
					limit = {
						exists = owner
						owner = {
							NOR = {
								is_same_value = root.owner
								is_in_federation_with = root.owner
								has_association_status = root.owner
								has_defensive_pact = root.owner
								has_non_aggression_pact = root.owner
								has_overlord = root.owner
								AND = {
									has_subject = root.owner
									has_loyalty > 0
								}
							}
						}
					}
					exists = this
				}
			}
		}
	}
	ai_use_defense_platforms = yes	#AI will not build defense platforms otherwise, except in the capital system
	weight_modifier = {
		base = 0
		complex_trigger_modifier = {
			#+75 for each gun_battery
			trigger = count_starbase_modules
			parameters = {
				type = gun_battery
			}
			mode = add
			mult = 75
		}
		complex_trigger_modifier = {
			#+75 for each missile_battery
			trigger = count_starbase_modules
			parameters = {
				type = missile_battery
			}
			mode = add
			mult = 75
		}
		complex_trigger_modifier = {
			#+75 for each hangar_bay
			trigger = count_starbase_modules
			parameters = {
				type = hangar_bay
			}
			mode = add
			mult = 75
		}
		modifier = {
			add = 250
			# Choke point - near a possible threat.
			solar_system = {
				is_bottleneck_system = yes
			}
			closest_system = {
				min_steps = 0
				max_steps = 3
				limit = {
					exists = owner
					owner = {
						NOT = {
							is_same_value = root.owner
						}
						# Not pathetic?
						relative_power = {
							who = root.owner
							category = all
							value > pathetic
						}
						# Doesn't trust us?
						OR = {
							opinion_level = {
								who = root.owner
								level <= poor
							}
							is_rival = root.owner
							is_hostile = root.owner
							is_hostile_to = root.owner
							is_domineering_to = root.owner
							is_unfriendly_to = root.owner
							is_angry_to = root.owner
							# Awakened Empire with low opinion
							is_belligerent_to = root.owner
							root.owner = {
								is_threatened_to = prev
							}
							# They want our land!
							has_claim = root.owner
							# Better safe than sorry
							has_valid_civic = civic_fanatic_purifiers
							has_valid_civic = civic_hive_devouring_swarm
							has_valid_civic = civic_machine_assimilator
							has_valid_civic = civic_machine_terminator
						}
						exists = this
					}
				}
			}
		}
		# Choke point - next to a hostile neighbour
		modifier = {
			add = 100
			solar_system = {
				is_bottleneck_system = yes
				any_neighbor_system = {
					exists = owner
					owner = {
						NOT = {
							is_same_value = root.owner
						}
						relative_power = {
							who = root.owner
							category = all
							value > pathetic
						}
						OR = {
							NOT = {
								has_established_contact = root.owner
							}
							opinion_level = {
								who = root.owner
								level <= poor
							}
							is_rival = root.owner
							is_hostile = root.owner
							is_domineering_to = root.owner
							is_hostile_to = root.owner
							is_disloyal_to = root.owner
							is_unfriendly_to = root.owner
							# Fallen empire
							is_angry_to = root.owner
							# Awakened Empire with low opinion
							# Double up because they are likely coming for us
							is_belligerent_to = root.owner
							root.owner = {
								is_threatened_to = prev
							}
						}
					}
				}
			}
		}
	}
	ai_design = {
		min = {
			base = 0
		}
		ratio = {
			base = 0.1
			modifier = {
				add = 0.05
				exists = owner
				owner = {
					has_ethic = ethic_pacifist
				}
			}
			modifier = {
				add = 0.05
				exists = owner
				owner = {
					has_ethic = ethic_fanatic_pacifist
				}
			}
		}
		# token followed by priority
		buildings = {
			offspring_outlook = {
				base = 3
			}
			communications_jammer = {
				base = 3
			}
			disruption_field = {
				base = 3
			}
			deep_space_black_site = {
				base = 2
			}
			transit_hub = {
				base = 2
			}
			curator_think_tank = {
				base = 2
			}
			art_college = {
				base = 2
			}
			trader_proxy_office = {
				base = 2
			}
			salvager_workshop = {
				base = 2
			}
			black_hole_observatory = {
				base = 2
			}
			nebula_refinery = {
				base = 2
			}
			ice_mining_station = {
				base = 2
			}
			dragon_hatchery = {
				base = 2
			}
			mercenary_garrison = {
				base = 1.5
			}
			# First to shoot often wins.
			target_uplink_computer = {
				base = 1.5
			}
			defense_grid = {
				base = 1.5
			}
			resource_silo = {
				base = 1
			}
			hydroponics_bay = {
				base = 1
			}
			# Hyperlane Registrar
			warp_fluctuator = {
				base = 1
			}
			shroud_beacon = {
				base = 1
			}
			command_center = {
				base = 1
			}
		}
		modules = {
			hangar_bay = {
				base = 0.8
			}
			missile_battery = {
				base = 1
			}
			gun_battery = {
				base = 1
			}
		}
	}
}
