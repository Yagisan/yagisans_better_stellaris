ybs_planet_is_resettlement_target = {
	optimize_memory
	free_housing >= 1
	free_jobs >= 1
	is_under_colonization = no
}

# Traits that give a bonus to everything like Efficient Processors or Excessive Endurance
# are ignored as those pops, by design, work well anywhere.
ybs_pop_is_good_for_research = {
	optimize_memory
	OR = {
		has_trait = trait_intelligent
		has_trait = trait_natural_engineers
		has_trait = trait_natural_physicists
		has_trait = trait_natural_sociologists
		has_trait = trait_latent_psionic
		has_trait = trait_psionic
		has_trait = trait_erudite
		has_trait = trait_enigmatic_intelligence
		has_trait = trait_enigmatic_intelligence_poor
		has_trait = trait_robot_logic_engines
		has_trait = trait_brainslug
		has_trait = trait_artificial_intelligence
		has_trait = trait_elevated_synapses
		has_trait = trait_cyborg_logic_engines
		has_trait = trait_necrophage
		has_trait = trait_cyborg_bionic_engineers
		has_trait = trait_cyborg_bionic_physicists
		has_trait = trait_cyborg_bionic_sociologists
		has_trait = trait_cyborg_creed_of_research
		has_trait = trait_robot_artificial_engineers
		has_trait = trait_robot_artificial_physicists
		has_trait = trait_robot_artificial_sociologists
		has_trait = trait_robot_inquisitative_axioms
	}
}

ybs_pop_is_good_for_unity = {
	optimize_memory
	OR = {
		has_trait = trait_traditional
		has_trait = trait_latent_psionic
		has_trait = trait_psionic
		has_trait = trait_brainslug
		has_trait = trait_robot_propaganda_machines
		has_trait = trait_expressed_tradition
		has_trait = trait_necrophage
	}
}

ybs_pop_is_good_for_mining = {
	optimize_memory
	OR = {
		has_trait = trait_industrious
		has_trait = trait_very_strong
		has_trait = trait_strong
		has_trait = trait_robot_power_drills
		has_trait = trait_juiced_power
		has_trait = trait_crack_miner
		has_trait = trait_cyborg_power_drills
		has_trait = trait_syncretic_proles
		has_trait = trait_cave_dweller
		has_trait = trait_cyborg_creed_of_labor
	}
}

ybs_pop_is_good_for_energy = {
	optimize_memory
	OR = {
		has_trait = trait_ingenious
		has_trait = trait_very_strong
		has_trait = trait_strong
		has_trait = trait_robot_superconductive
		has_trait = trait_juiced_power
		has_trait = trait_technical_skill
		has_trait = trait_cyborg_superconductive
		has_trait = trait_syncretic_proles
		has_trait = trait_cyborg_creed_of_labor
	}
}

ybs_pop_is_good_for_farming = {
	optimize_memory
	OR = {
		has_trait = trait_agrarian
		has_trait = trait_very_strong
		has_trait = trait_strong
		has_trait = trait_robot_harvesters
		has_trait = trait_juiced_power
		has_trait = trait_farm_hands
		has_trait = trait_excessive_endurance
		has_trait = trait_cyborg_harvesters
		has_trait = trait_syncretic_proles
		has_trait = trait_cyborg_creed_of_labor
	}
}

ybs_pop_is_good_for_trade = {
	optimize_memory
	OR = {
		has_trait = trait_thrifty
		has_trait = trait_nuumismatic_administration
		has_trait = trait_robot_trading_algorithms
		has_trait = trait_cyborg_trading_algorithms
		has_trait = trait_robot_matrix_trading
	}
}

ybs_pop_is_good_for_fortress = {
	optimize_memory
	OR = {
		has_trait = trait_resilient
		has_trait = trait_very_strong
		has_trait = trait_strong
		has_trait = trait_juiced_power
		has_trait = trait_lithoid
		has_trait = trait_cybernetic
		has_trait = trait_limited_regeneration
		has_trait = trait_cyborg_integrated_weaponry
		has_trait = trait_cyborg_creed_of_war
		has_trait = trait_robot_integrated_weaponry
	}
}

# A naive search would only check planet designation
# but not every job on that world will be one of those types.
# has_research_designation = yes
ybs_planet_is_good_for_research = {
	optimize_memory
	# Check for forbidden jobs first. Not suitable if any of these are found.
	NOT = {
		has_forbidden_jobs = head_researcher
		has_forbidden_jobs = researcher
		has_forbidden_jobs = xeno_zoo_keeper
		has_forbidden_jobs = necromancer
		has_forbidden_jobs = archaeoengineers
		has_forbidden_jobs = brain_drone
		has_forbidden_jobs = calculator
		has_forbidden_jobs = archaeo_drone
		has_forbidden_jobs = archaeo_unit
		has_forbidden_jobs = dimensional_portal_researcher
		has_forbidden_jobs = dimensional_portal_researcher_gestalt
		has_forbidden_jobs = space_time_anomaly_researcher
		has_forbidden_jobs = space_time_anomaly_researcher_gestalt
		has_forbidden_jobs = archivist
		has_forbidden_jobs = stratovent_researcher
		has_forbidden_jobs = munitions_decommissioner
		has_forbidden_jobs = munitions_decommissioning_unit
		has_forbidden_jobs = munitions_decommissioning_drone
		has_forbidden_jobs = astral_researcher
		has_forbidden_jobs = astral_drone
		has_forbidden_jobs = astral_unit
		has_forbidden_jobs = nanotech_research_unit
		has_forbidden_jobs = nanotech_researcher
	}
	# Check for a free suitable job.
	OR = {
		has_available_jobs = head_researcher
		has_available_jobs = researcher
		has_available_jobs = xeno_zoo_keeper
		has_available_jobs = necromancer
		has_available_jobs = archaeoengineers
		has_available_jobs = brain_drone
		has_available_jobs = calculator
		has_available_jobs = archaeo_drone
		has_available_jobs = archaeo_unit
		has_available_jobs = dimensional_portal_researcher
		has_available_jobs = dimensional_portal_researcher_gestalt
		has_available_jobs = space_time_anomaly_researcher
		has_available_jobs = space_time_anomaly_researcher_gestalt
		has_available_jobs = archivist
		has_available_jobs = stratovent_researcher
		has_available_jobs = munitions_decommissioner
		has_available_jobs = munitions_decommissioning_unit
		has_available_jobs = munitions_decommissioning_drone
		has_available_jobs = astral_researcher
		has_available_jobs = astral_drone
		has_available_jobs = astral_unit
		has_available_jobs = nanotech_research_unit
		has_available_jobs = nanotech_researcher
	}
}

# A naive search would only check planet designation
# but not every job on that world will be one of those types.
# has_unity_designation = yes
ybs_planet_is_good_for_unity = {
	optimize_memory
	# Check for forbidden jobs first. Not suitable if any of these are found.
	NOT = {
		has_forbidden_jobs = politician
		has_forbidden_jobs = executive
		has_forbidden_jobs = high_priest
		has_forbidden_jobs = noble
		has_forbidden_jobs = priest
		has_forbidden_jobs = death_priest
		has_forbidden_jobs = culture_worker
		has_forbidden_jobs = bureaucrat
		has_forbidden_jobs = unifier
		has_forbidden_jobs = manager
		has_forbidden_jobs = steward
		has_forbidden_jobs = death_chronicler
		has_forbidden_jobs = coordinator
		has_forbidden_jobs = evaluator
		has_forbidden_jobs = synapse_drone
		has_forbidden_jobs = chronicle_drone
		has_forbidden_jobs = mortal_initiate
		has_forbidden_jobs = haruspex
		has_forbidden_jobs = technophant
		has_forbidden_jobs = robot_caretaker
	}
	# Check for a free suitable job.
	OR = {
		has_available_jobs = politician
		has_available_jobs = executive
		has_available_jobs = high_priest
		has_available_jobs = noble
		has_available_jobs = priest
		has_available_jobs = death_priest
		has_available_jobs = culture_worker
		has_available_jobs = bureaucrat
		has_available_jobs = unifier
		has_available_jobs = manager
		has_available_jobs = steward
		has_available_jobs = death_chronicler
		has_available_jobs = coordinator
		has_available_jobs = evaluator
		has_available_jobs = synapse_drone
		has_available_jobs = chronicle_drone
		has_available_jobs = mortal_initiate
		has_available_jobs = haruspex
		has_available_jobs = technophant
		has_available_jobs = robot_caretaker
	}
}

# A naive search would only check planet designation
# but not every job on that world will be one of those types.
# has_foundry_designation = yes
ybs_planet_is_good_for_foundry = {
	optimize_memory
	# Check for forbidden jobs first. Not suitable if any of these are found.
	NOT = {
		has_forbidden_jobs = bluelotus_technician
		has_forbidden_jobs = bluelotus_drone
		has_forbidden_jobs = odd_factory_worker
		has_forbidden_jobs = odd_factory_drone
		has_forbidden_jobs = manufactorium_specialist
		has_forbidden_jobs = manufactorium_complex_drone
		has_forbidden_jobs = foundry
		has_forbidden_jobs = fabricator
		has_forbidden_jobs = alloy_drone
		has_forbidden_jobs = catalytic_technician
		has_forbidden_jobs = catalytic_drone
	}
	# Check for a free suitable job.
	OR = {
		has_available_jobs = bluelotus_technician
		has_available_jobs = bluelotus_drone
		has_available_jobs = odd_factory_worker
		has_available_jobs = odd_factory_drone
		has_available_jobs = manufactorium_specialist
		has_available_jobs = manufactorium_complex_drone
		has_available_jobs = foundry
		has_available_jobs = fabricator
		has_available_jobs = alloy_drone
		has_available_jobs = catalytic_technician
		has_available_jobs = catalytic_drone
		has_available_jobs = politician
	}
}

# A naive search would only check planet designation
# but not every job on that world will be one of those types.
# has_factory_designation = yes
ybs_planet_is_good_for_factory = {
	optimize_memory
	# Check for forbidden jobs first. Not suitable if any of these are found.
	NOT = {
		has_forbidden_jobs = artisan
		has_forbidden_jobs = artificer
		has_forbidden_jobs = pearl_diver
		has_forbidden_jobs = artisan_drone
	}
	# Check for a free suitable job.
	OR = {
		has_available_jobs = artisan
		has_available_jobs = artificer
		has_available_jobs = pearl_diver
		has_available_jobs = artisan_drone
	}
}

# A naive search would only check planet designation
# but not every job on that world will be one of those types.
# has_refinery_designation = yes
ybs_planet_is_good_for_refinery = {
	optimize_memory
	# Check for forbidden jobs first. Not suitable if any of these are found.
	NOT = {
		has_forbidden_jobs = chemist
		has_forbidden_jobs = chemist_drone
		has_forbidden_jobs = translucer
		has_forbidden_jobs = translucer_drone
		has_forbidden_jobs = crystal_miner
		has_forbidden_jobs = crystal_mining_drone
		has_forbidden_jobs = gas_refiner
		has_forbidden_jobs = gas_refiner_drone
		has_forbidden_jobs = gas_extractor
		has_forbidden_jobs = gas_extraction_drone
		has_forbidden_jobs = gas_plant_engineer
		has_forbidden_jobs = gas_plant_engineer_gestalt
		has_forbidden_jobs = stratovent_refiner
		has_forbidden_jobs = stratovent_refiner_upg
		has_forbidden_jobs = mote_harvester
		has_forbidden_jobs = mote_harvesting_drone
	}
	# Check for a free suitable job.
	OR = {
		has_available_jobs = chemist
		has_available_jobs = chemist_drone
		has_available_jobs = translucer
		has_available_jobs = translucer_drone
		has_available_jobs = crystal_miner
		has_available_jobs = crystal_mining_drone
		has_available_jobs = gas_refiner
		has_available_jobs = gas_refiner_drone
		has_available_jobs = gas_extractor
		has_available_jobs = gas_extraction_drone
		has_available_jobs = gas_plant_engineer
		has_available_jobs = gas_plant_engineer_gestalt
		has_available_jobs = stratovent_refiner
		has_available_jobs = stratovent_refiner_upg
		has_available_jobs = mote_harvester
		has_available_jobs = mote_harvesting_drone
	}
}

# A naive search would only check planet designation
# but not every job on that world will be one of those types.
# has_trade_designation = yes
ybs_planet_is_good_for_trade = {
	optimize_memory
	# Check for forbidden jobs first. Not suitable if any of these are found.
	NOT = {
		has_forbidden_jobs = merchant
		has_forbidden_jobs = executive
		has_forbidden_jobs = trader
		has_forbidden_jobs = numistic_priest
		has_forbidden_jobs = preacher
		has_forbidden_jobs = underground_trade_worker
		has_forbidden_jobs = titan_hunter
		has_forbidden_jobs = stratovent_researcher
	}
	# Check for a free suitable job.
	OR = {
		has_available_jobs = merchant
		has_available_jobs = executive
		has_available_jobs = trader
		has_available_jobs = numistic_priest
		has_available_jobs = preacher
		has_available_jobs = underground_trade_worker
		has_available_jobs = titan_hunter
		has_available_jobs = stratovent_researcher
	}
}

# A naive search would only check planet designation
# but not every job on that world will be one of those types.
# has_fortress_designation = yes
ybs_planet_is_good_for_fortress = {
	optimize_memory
	# Check for forbidden jobs first. Not suitable if any of these are found.
	NOT = {
		has_forbidden_jobs = enforcer
		has_forbidden_jobs = soldier
		has_forbidden_jobs = patrol_drone
		has_forbidden_jobs = warrior_drone
		has_forbidden_jobs = stasis_warden
		has_forbidden_jobs = stasis_warden_drone
	}
	# Check for a free suitable job.
	OR = {
		has_available_jobs = enforcer
		has_available_jobs = soldier
		has_available_jobs = patrol_drone
		has_available_jobs = warrior_drone
		has_available_jobs = stasis_warden
		has_available_jobs = stasis_warden_drone
	}
}

# A naive search would only check planet designation
# but not every job on that world will be one of those types.
# has_mining_designation = yes
ybs_planet_is_good_for_mining = {
	optimize_memory
	# Check for forbidden jobs first. Not suitable if any of these are found.
	NOT = {
		has_forbidden_jobs = miner
		has_forbidden_jobs = scrap_miner
		has_forbidden_jobs = mining_drone
		has_forbidden_jobs = scrap_miner_drone
		has_forbidden_jobs = cave_cleaner
		has_forbidden_jobs = cave_cleaner_gestalt
		has_forbidden_jobs = turtle_miner
		has_forbidden_jobs = turtle_miner_gestalt
		has_forbidden_jobs = manufactorium_scraper
		has_forbidden_jobs = manufactorium_scraper_drone
		has_forbidden_jobs = astrogarbage_collector
		has_forbidden_jobs = astrogarbage_collector_gestalt
		has_forbidden_jobs = stratovent_refiner_minerals
	}
	# Check for a free suitable job.
	OR = {
		has_available_jobs = miner
		has_available_jobs = scrap_miner
		has_available_jobs = mining_drone
		has_available_jobs = scrap_miner_drone
		has_available_jobs = cave_cleaner
		has_available_jobs = cave_cleaner_gestalt
		has_available_jobs = turtle_miner
		has_available_jobs = turtle_miner_gestalt
		has_available_jobs = manufactorium_scraper
		has_available_jobs = manufactorium_scraper_drone
		has_available_jobs = astrogarbage_collector
		has_available_jobs = astrogarbage_collector_gestalt
		has_available_jobs = stratovent_refiner_minerals
	}
}

# A naive search would only check planet designation
# but not every job on that world will be one of those types.
# has_generator_designation = yes
ybs_planet_is_good_for_energy = {
	optimize_memory
	# Check for forbidden jobs first. Not suitable if any of these are found.
	NOT = {
		has_forbidden_jobs = technician
		has_forbidden_jobs = technician_drone
		has_forbidden_jobs = underground_contact_drone
		has_forbidden_jobs = space_time_anomaly_researcher_gestalt
		has_forbidden_jobs = myrmeku_power_farmer
		has_forbidden_jobs = myrmeku_power_farmer_gestalt
	}
	# Check for a free suitable job.
	OR = {
		has_available_jobs = technician
		has_available_jobs = technician_drone
		has_available_jobs = underground_contact_drone
		has_available_jobs = space_time_anomaly_researcher_gestalt
		has_available_jobs = myrmeku_power_farmer
		has_available_jobs = myrmeku_power_farmer_gestalt
	}
}

# A naive search would only check planet designation
# but not every job on that world will be one of those types.
# has_farming_designation = yes
ybs_planet_is_good_for_farming = {
	optimize_memory
	# Check for forbidden jobs first. Not suitable if any of these are found.
	NOT = {
		has_forbidden_jobs = farmer
		has_forbidden_jobs = angler
		has_forbidden_jobs = agri_drone
		has_forbidden_jobs = titan_hunter
		has_forbidden_jobs = puddle_technician
		has_forbidden_jobs = puddle_technician_drone
	}
	# Check for a free suitable job.
	OR = {
		has_available_jobs = farmer
		has_available_jobs = angler
		has_available_jobs = agri_drone
		has_available_jobs = titan_hunter
		has_available_jobs = puddle_technician
		has_available_jobs = puddle_technician_drone
	}
}
